// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  // shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Song {
  id           String         @id @default(cuid())
  name         String
  author       String
  lyrics       Json
  music        Json
  language     String
  category     Category[]
  slug         String         @unique
  SongsOnBooks SongsOnBooks[]
}

model Category {
  id   String @id @default(cuid())
  name String
  slug String @unique
  song Song[]
}

model Book {
  id           String         @id @default(cuid())
  name         String
  thumbnail    String
  lanuguage    String
  slug         String         @unique
  SongsOnBooks SongsOnBooks[]
}

model SongsOnBooks {
  song       Song   @relation(fields: [songId], references: [id])
  book       Book   @relation(fields: [bookId], references: [id])
  songId     String
  bookId     String
  songNumber Int

  @@id([songId, bookId])
  @@unique([songNumber, bookId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
